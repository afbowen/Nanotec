//Map SDOs
map U16 controlWord as output 0x6040:00
map U16 statusWord as input 0x6041:00
map S32 positionActual as input 0x6064:00

map S32 externalCommand as input 0x2400:01

//Debug (no need to map in final)
map S08 opMode as input 0x6060:00
map U32 dInput as input 0x60FD:00

#include "wrapper.h"

//Setup Variables
bool initialized;	//Set to zero at power-on, cleared after setup complete
S32 commandPetal;	//1 - stop,    2 - close,   3 - open
U08 statePetal;		//1 - stopped, 2 - opening, 2 - open, 3 - closing, 4 - closed

U16 lastControlWord;
U16 lastCommandedState;
bool stopNow;

void homingStateMachine();

//user() is the main() loop
void user()
{
	if(initialized == false)
	{
		VmmDebugOutputString("Initializing...");
		//Configure for Homing
		od_write(0x3240, 0x01, 0);	//Link limit switch input to homing point for limit switch
		od_write(0x3240, 0x02, 0);	//Do not invert switch logic (for NC switch, set to 1)
		od_write(0x3240, 0x03, 0);	//Do not force values with software (we're using limit switches)
		od_write(0x3240, 0x06, 0);	//Set switch voltage range to 5V (for 24V, set to 1)
		yield();

		od_write(0x608F, 0x01, 720);	//Position resolution, 720 steps/rev (0.5 degree steps)
		od_write(0x608F, 0x02, 1);		//1 encoder rev per motor turn

		stopNow = false;

		initialized = true;
		yield();

		//Send ready message over CAN
		VmmDebugOutputString("COMPLETE\n");
		commandPetal = 0;
		yield();


		//To Do
		/*
		-Set QS ramp in 0x6085 (QS to SO disabled mode)
		-Bit 4 set, ref started; clear to stop
		-OMS bits in statusWord
		*/
	}


	//Check for new command, set variable
	commandPetal = In.externalCommand;
	od_write(0x2400, 0x01, 0);	//Reset command register
	//VmmDebugOutputInt(commandPetal);
	yield();

	//VmmDebugOutputInt(In.externalCommand);
	//yield();

	//Set commandPetal variable (if message available)

	//Execute command (if available)
	switch(commandPetal)
	{
		case 0:
			//No new commands, break
			break;

		case 1:
			//Issue quickstop
			Out.controlWord = 0;
			break;

		case 2:
			//Close
			od_write(0x3240, 0x01, 1);	//Configure Digital Input 1 as negative limit switch (for CLOSING)
			od_write(0x6060, 0x00, 6);	//Set to homing mode
			od_write(0x6098, 0x00, 17); //Homing Method: reference to negative limit switch (for CLOSING)
			od_write(0x6099, 0x01, 60);	//!Homing speed (switch), rev/min check user units
			od_write(0x6099, 0x02, 10);
			homingStateMachine();
			//od_write(0x607C, 0x00, 0);	//Difference between application and zero point of machine (from encoder?)
			break;

		case 3:
			//Open
			od_write(0x3240, 0x01, 2);	//Configure Digital Input 2 as positive limit switch (for OPENING)
			od_write(0x6060, 0x00, 6);	//Set to homing mode
			od_write(0x6098, 0x00, 18); //Homing Method: reference to negative limit switch (for OPENING, CCW)
			od_write(0x6099, 0x01, 60);	//!Homing speed (switch), rev/min check user units
			od_write(0x6099, 0x02, 10);
			homingStateMachine();
			break;

		default:
			break;
	}
}


void homingStateMachine()
{
	//STATE MACHINE
	//Request state "enable voltage" (QS|EV)
	Out.controlWord = 0x06;
	yield();
	while((In.statusWord & 0xEF) != 0x21)
	{
		yield();
	}

	//Request state "switched on" (QS|EV|SO)
	Out.controlWord = 0x07;
	yield();
	while((In.statusWord & 0xEF) != 0x23)
	{
		yield();
	}

	//Request state "enable operation" (EO|QS|EV|SO)
	Out.controlWord = 0x0F;
	yield();
	while((In.statusWord & 0xEF) != 0x27)
	{
		yield();
	}

	//Request state "enable operation" (OMS[0]|EO|QS|EV|SO)
	Out.controlWord = 0x1F;
	yield();

	//S16 i;
	//Wait for bits 10 and 12 in statusWord to be set, indicating homing complete
	while((In.statusWord & 0x1400) != 0x1400 && !stopNow)
	{
		/*if(i >= 3000)
		{
			//VmmDebugOutputInt(In.dInput);
			//VmmDebugOutputInt(In.positionActual);
			VmmDebugOutputInt(In.externalCommand);
			i = 0;
		}
		i+=1;*/
		if(In.externalCommand > 0)
		{
			stopNow = true;
			Out.controlWord = 0; //quickstop
		}
		yield();
	}

	//od_write(0x2300, 0x00, 0);
	commandPetal = 0;
	yield();
}




/*
Probe for four motors, request ID from each
Note position of motor (P0)
Execute homing (basically push against switch)
Enter "ready" state
Command "open"
Command "quick stop" (return position)
Command "close"
*/
